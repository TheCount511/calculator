{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","calculate","expr","Function","setCharAt","str","index","chr","substr","handleclick","event","userInput","target","value","operators","setState","presentValue","display","initialvalue","input","result","operand","status","buffer","isNaN","parseInt","state","parseFloat","toString","includes","length","resolve","splice","edit","specialOp","setTimeout","className","this","join","id","onClick","type","Number","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56026a49.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n//51790-9ikmIvm0ufb6Z9X\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            presentValue: \"\",\n            display: 0,\n            input: [],\n            initialvalue: 0,\n            operand: '',\n            result: \"\",\n            status: \"\",\n            buffer: \"\",\n            specialOp: \"\"\n        }\n    }\n\n    //this function is used to calculate string expressions as mathematical expressions\n    calculate = (expr) => {\n        return new Function('return ' + expr)()\n\n    }\n\n    //this function is used to replace the operand when it is being changed mid expression\n    setCharAt = (str, index, chr) => {\n        return str.substr(0, index) + chr;\n    }\n\n    //this function handles button clicks\n    handleclick = (event) => {\n        const userInput = event.target.value;\n        const operators = [\"+\", \"-\", \"/\", \"*\"];\n\n        //this clears the calculator when the \"AC\" button is clicked \n        if (userInput === \"clear\") {\n            this.setState({ presentValue: \"\", display: 0, initialvalue: 0, input: [], result: \"\", operand: \"\", status: \"\", buffer: \"\" })\n        }\n\n\n        //this check is the input is a Number\n        if (!isNaN(parseInt(userInput))) {\n\n            if (this.state.presentValue.toString().length >= 16) {\n                let truVal = () => this.setState({ display: this.state.presentValue })\n                setTimeout(truVal, 4000);\n\n                this.setState({ display: \"Input limit reached\" });\n            } else {\n                if (this.state.status === \"end\") {\n                    this.setState({ initialvalue: 0 })\n                }\n\n                if (this.state.buffer !== \"\" && this.state.presentValue === \"\") {\n                    this.setState(state => ({ presentValue: parseFloat(`${state.buffer}${userInput}`) }), () => {\n                        this.setState(state => ({\n                            display: state.presentValue\n                        }))\n                    })\n                } else if (this.state.buffer !== \"\" && !isNaN(parseFloat(this.state.presentValue))) {\n                    this.setState(state => ({ buffer: `${this.state.buffer}${userInput}` }), () => {\n                        this.setState(state => ({ presentValue: parseFloat(state.buffer), display: state.buffer }))\n                    })\n                } else //If a number hasn't been entered previously set the present value to the new number\n                    if (this.state.presentValue === 0) {\n                        this.setState({ presentValue: parseFloat(userInput), }, () => { this.setState(state => ({ display: state.presentValue })) })\n                    }\n\n                else { //If a number has been entered, but no operation has been performed on it; concatenate the new number to it.\n                    this.setState(state => ({ presentValue: parseFloat(`${state.presentValue}${userInput}`) }), () => { this.setState(state => ({ display: state.presentValue })) });\n                }\n            }\n\n            //if  the input is an operand perform the following functions; starting with setting the operand state to the input\n        } else if (userInput === \".\") {\n\n            if (this.state.presentValue === \"\") {\n                this.setState({ presentValue: 0 }, () => { this.setState({ buffer: `0.`, display: `0.` }) })\n            } else if (!isNaN(parseFloat(this.state.presentValue)) && !this.state.presentValue.toString().includes(\".\")) {\n                this.setState(state => ({ buffer: `${state.presentValue}${userInput}`, display: `${state.presentValue}${userInput}` }))\n            }\n\n        } else if (operators.includes(userInput)) {\n            this.setState({\n                operand: userInput,\n                status: \"start\",\n                buffer: \"\"\n            });\n\n            //when an operand is clicked, if the last value of the input state is an operand, and the present value os empty\n            //set the last value of the input state(the operand) to the newly selected operand\n            if (operators.includes(this.state.input[this.state.input.length - 1]) && this.state.presentValue === \"\") {\n\n                if ((this.state.input[this.state.input.length - 1] !== \"-\" && this.state.input[this.state.input.length - 2] !== \"-\") && userInput === \"-\") {\n\n                    this.setState(state =>\n                        ({ input: [...state.input, userInput], initialvalue: `${state.initialvalue}${userInput}` }))\n                } else if ((operators.includes(this.state.input[this.state.input.length - 1])) && operators.includes(this.state.input[this.state.input.length - 2]) && userInput !== \"-\") {\n                    let edit = (resolve) => {\n                        this.state.input.splice(-2, 2, userInput);\n                        resolve();\n                    }\n\n                    let resolve = () => {\n                        this.setState(state => ({ input: state.input, initialvalue: this.setCharAt(state.initialvalue, state.initialvalue.length - 2, userInput) }))\n                    }\n\n                    edit(resolve);\n\n\n                } else {\n                    this.state.input[this.state.input.length - 1] = userInput;\n                    this.setState(state => ({ initialvalue: this.setCharAt(state.initialvalue, state.initialvalue.length - 1, userInput) }));\n                }\n            }\n\n            //when an operand is selected, if the input state is empty and the present value is empty\n            //add the input value to the input state and follow it with the operand\n            //also set the initial value to include the operand\n            else if (!this.state.input.length && this.state.presentValue === \"\")\n\n            {\n                this.setState(state => ({\n                    input: [...state.input, state.initialvalue, state.operand],\n                    initialvalue: `${state.initialvalue}${state.operand}`\n                }))\n\n            } else if (this.state.presentValue === \"\" && this.state.specialOp) {\n                this.setState(state => ({\n                    input: [...state.input, state.operand],\n                    initialvalue: `${state.initialvalue}${state.operand}`,\n                    specialOp: false\n                }))\n            }\n\n            //if the last value of the input state is an operand perform the following functions:\n            else if (isNaN(this.state.input[this.state.input.length - 1])) {\n                //add the present value, followed by the selected operand to the input state\n                this.setState(state => ({\n                        input: [...state.input, state.presentValue, state.operand],\n                    }),\n                    () => { //when that is completed set the result to be the calculation of the initial value and the present value\n                        if (this.state.initialvalue === 0) {\n                            this.setState(state => ({\n                                result: state.presentValue,\n                                initialvalue: `${state.presentValue}${state.operand}`\n                            }), () => {\n                                //when that is completed set the present value to null\n                                this.setState({\n                                    presentValue: \"\"\n                                })\n                            })\n                        } else {\n                            this.setState(state => ({\n                                result: this.calculate(`${state.initialvalue}${state.presentValue}`),\n                                initialvalue: `${this.calculate(`${state.initialvalue}${state.presentValue}`)}${state.operand}`,\n                            }), () => {\n                                //when that is completed set the present value to null\n                                this.setState({\n                                    presentValue: \"\"\n                                })\n                            })\n                        }\n                    })\n            }\n\n\n        }\n\n        //if the input clicked is an equal to sign then calculate the expression\n        if (userInput === \"=\" && !isNaN(parseInt(this.state.presentValue)) && (this.state.input.length >= 1)) {\n\n            this.setState(state => ({ result: this.calculate(`${state.initialvalue}${state.presentValue}`) }), () => {\n                this.setState(state => ({ initialvalue: state.result, display: state.result, presentValue: \"\", input: [], operand: \"\", status: \"end\" }))\n            });\n        }\n\n        if (userInput === \"±\") {\n            if (parseFloat(this.state.presentValue) > 0 && this.state.input.length === 0) {\n                if (this.state.input.length < 1) {\n                    this.setState(state => ({ initialvalue: -(state.presentValue), specialOp: true }), () => { this.setState(state => ({ presentValue: \"\", input: [...state.input, state.initialvalue], display: state.initialvalue })) })\n                }\n            } else if (this.state.input.length >= 1 && !isNaN(parseFloat(this.state.presentValue))) {\n\n                this.setState(state => ({ presentValue: -(state.presentValue) }), () => {\n                    this.setState(state => ({ display: state.presentValue, input: [...state.input, state.presentValue] }))\n                })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"calculator-container\">\n      <div className=\"formula\">{this.state.input.join(\" \")}</div>\n      <div id=\"display\">{this.state.display}</div>\n      <div className=\"buttons-container\">\n        <button className=\"wide clear\"  id=\"clear\" value=\"clear\"  onClick={this.handleclick}>AC</button>\n        <button className=\"regular operator\" id=\"divide\" value=\"/\" type=\"operator\" onClick={this.handleclick}>/</button>\n        <button className=\"regular operator special\" id=\"multiply\" value=\"*\" type=\"operator\"  onClick={this.handleclick}>*</button>\n        <button className=\"regular operator special\" id=\"multiply\" value=\"±\" type=\"operator\"  onClick={this.handleclick}>±</button>\n        <button className=\"regular\" id=\"seven\" value=\"7\"  onClick={this.handleclick}>7</button>\n        <button className=\"regular\" id=\"eight\" value=\"8\"  onClick={this.handleclick}>8</button>\n        <button className=\"regular\" id=\"nine\" value=\"9\"  onClick={this.handleclick}>9</button>\n        <button className=\"regular operator\" id=\"add\" value=\"+\" type=\"operator\" onClick={this.handleclick}>+</button>\n        <button className=\"regular\" id=\"subtract\" value=\"-\" type=\"operator\" onClick={this.handleclick}>-</button>\n        <button className=\"regular\" id=\"four\" value=\"4\"  onClick={this.handleclick}>4</button>\n        <button className=\"regular\" id=\"five\" value=\"5\"  onClick={this.handleclick}>5</button>\n        <button className=\"regular\" id=\"six\" value=\"6\"  onClick={this.handleclick}>6</button>\n        <button className=\"regular\" id=\"one\" value=\"1\"  onClick={this.handleclick}>1</button>\n        <button className=\"regular\" id=\"two\" value=\"2\"  onClick={this.handleclick}>2</button>\n        <button className=\"regular\" id=\"three\" value=\"3\"  onClick={this.handleclick}>3</button>\n        <button className=\"wide\"    id=\"zero\" value={Number(0)}  onClick={this.handleclick}>0</button>\n        <button className=\"regular\" id=\"decimal\" value=\".\"  onClick={this.handleclick}>.</button>\n        <button className=\"long\"    id=\"equals\"  value=\"=\" onClick={this.handleclick}>=</button>\n      </div>\n      </div>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}